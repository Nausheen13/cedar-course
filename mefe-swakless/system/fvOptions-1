FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvOptions;
}

scalarSources 
{
    type            scalarCodedSource;
    active          yes;
    name            scalarCoupling;
    selectionMode   all;
    fields          (s crys);
    
    codeAddSup
    #{
        // Modified parameters
        const scalar kG = 1.2e-4;        // Growth rate constant [m/s]
        const scalar cSat = 0.08;        // Saturation concentration [kg/kg]
        const scalar Crho = 1180;        // Crystal density [kg/m3]
        const scalar inductionTime = 0.1; // Induction time [s]
        const scalar n = 2.0;            // Growth order
        
        // Correctly access velocity field as vector
        const volVectorField& U = mesh().lookupObject<volVectorField>("U");
        const scalar currentTime = mesh().time().value();
        const scalar deltaTValue = mesh().time().deltaTValue();
        
        // Access fields
        volScalarField& s = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("s"));
        volScalarField& crys = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("crys"));
        
        forAll(s, cellI)
        {
            if (s[cellI] > cSat && currentTime > inductionTime)
            {
                // Calculate shear using velocity magnitude
                scalar localVelocity = mag(U[cellI]);
                scalar shearFactor = localVelocity/0.01;  // Normalized by inlet velocity
                
                // Modified growth rate with non-linear supersaturation dependency
                scalar supersaturation = (s[cellI] - cSat)/cSat;
                scalar growth = kG * pow(supersaturation, n) * 
                              (1.0 + 0.2 * shearFactor) *  // Reduced shear effect
                              deltaTValue;
                
                // Include existing crystals effect (reduced factor)
                scalar crystalEffect = (1.0 + 2.0 * crys[cellI]);
                
                crys[cellI] += growth * crystalEffect;
                s[cellI] -= growth * Crho * crystalEffect;
            }
        }
    #};
    
    codeCorrect
    #{
    #};
    
    codeConstrain
    #{
        volScalarField& crys = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("crys"));
        volScalarField& s = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("s"));
        
        forAll(crys, cellI)
        {
            crys[cellI] = max(0, min(crys[cellI], 1.0));
            s[cellI] = max(0, s[cellI]);
        }
    #};
}

// ************************************************************************* //
