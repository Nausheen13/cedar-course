FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvOptions;
}
scalarSources 
{
    type            scalarCodedSource;
    active          yes;
    name            scalarCoupling;
    selectionMode   all;
    fields          (s crys);
    
    codeAddSup
    #{
        // Parameters
	const scalar kG = 1.956e-7;       // Growth rate constant [m/s] (from Table 11 optimum params)
	const scalar cSat = 0.01140;        // Dimensionless saturation concentration (0.00961/0.0114)
	const scalar Crho = 1346;         // Crystal density of mefenamic acid [kg/m3] (from SI data)
	const scalar nucleationThreshold = 0.4;  // From Table S2 experimental data
	const scalar inductionTime = 1.0;   // From SI data showing 5 min induction time
	const scalar maxNucleationSites = 5;  // Can keep as-is
	const scalar initialSize = 65.53e-6;   // Initial crystal size [m] (From Table 3 L0 value)
        
	const scalar crystalShape = 0.52;  // π/6 * (1/π) for needle-like crystals
        
        // Create size field if it doesn't exist
        static autoPtr<volScalarField> crystalSizePtr;
        if (!crystalSizePtr.valid())
        {
            crystalSizePtr.reset
            (
                new volScalarField
                (
                    IOobject
                    (
                        "crystalSize",
                        mesh().time().timeName(),
                        mesh(),
                        IOobject::NO_READ,
                        IOobject::AUTO_WRITE
                    ),
                    mesh(),
                    dimensionedScalar("zero", dimLength, 0.0)
                )
            );
        }
        volScalarField& crystalSize = crystalSizePtr();
        
        // Access fields
        volScalarField& s = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("s"));
        volScalarField& crys = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("crys"));
        const scalar currentTime = mesh().time().value();
        const scalar deltaTValue = mesh().time().deltaTValue();
        
        static DynamicList<label> nucleationCells;
        if (nucleationCells.empty() && currentTime > inductionTime)
        {
            label sitesCreated = 0;
            forAll(s, cellI)
            {
                if (sitesCreated < maxNucleationSites)
                {
                    scalar supersaturation = (s[cellI] - cSat)/cSat;
                    if (supersaturation > nucleationThreshold)
                    {
                        if (scalar(rand())/RAND_MAX > 0.99)
                        {
                            nucleationCells.append(cellI);
                            crys[cellI] = 0.1;
                            crystalSize[cellI] = initialSize;
                            sitesCreated++;
                        }
                    }
                }
            }
        }
        
        forAll(s, cellI)
        {
            scalar supersaturation = (s[cellI] - cSat)/cSat;
            if (supersaturation > 0)
            {
                scalar minDist = GREAT;
                
                forAll(nucleationCells, i)
                {
                    scalar dist = mag(mesh().C()[cellI] - mesh().C()[nucleationCells[i]]);
                    minDist = min(minDist, dist);
                }
                
                if (minDist < GREAT)
                {
                    scalar distFactor = exp(-minDist/0.003);
                    scalar growth = kG * pow(supersaturation, 2) * distFactor * deltaTValue;
                    
                    if (crys[cellI] > 1e-6 || distFactor > 0.1)
                    {
                        scalar oldCrys = crys[cellI];
                        crys[cellI] += growth;
                        s[cellI] -= growth * Crho;
                        
                        // Update crystal size based on mass balance
                        // Assuming spherical particles: d = (6m/πρN)^(1/3)
                        if (crystalSize[cellI] < initialSize)
                        {
                            crystalSize[cellI] = initialSize;
                        }
                        else
                        {
                            scalar volumeIncrease = (crys[cellI] - oldCrys) / Crho;
                            scalar newSize = pow(volumeIncrease/crystalShape + pow(crystalSize[cellI], 3), 1.0/3.0);
                            crystalSize[cellI] = newSize;
                        }
                    }
                }
            }
        }
    #};
    
    codeCorrect
    #{
    #};
    
    codeConstrain
    #{
        volScalarField& crys = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("crys"));
        volScalarField& s = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("s"));
        
        forAll(crys, cellI)
        {
            crys[cellI] = max(0, min(crys[cellI], 1.0));
            s[cellI] = max(0, s[cellI]);
        }
    #};
}
